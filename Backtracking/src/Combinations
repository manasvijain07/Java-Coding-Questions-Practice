Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.
Example 2:

Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.
 

Constraints:

1 <= n <= 20
1 <= k <= n

-----------------------------------

Solution 1 - 
TC - O(n)
SC - O(1)

class Solution {
    List<List<Integer>> res;
    public List<List<Integer>> combine(int n, int k) {
        res = new ArrayList<>();
        
        List<Integer> input = new ArrayList<>();
        for(int i = 0; i < n; i++)
        {
            input.add(i + 1);
        }
        
        helper(input, k, new ArrayList<>(), 0);
        return res;
    }
    
    public void helper(List<Integer> input, int k, List<Integer> path, int index)
    {
        if(k == path.size())
        {
            res.add(new ArrayList<>(path));
            return;
        }
        
        for(int i = index; i < input.size(); i++)
        {
            path.add(input.get(i));
            helper(input, k, path, i + 1);
            path.remove(path.size() - 1);
        }
    }
}
