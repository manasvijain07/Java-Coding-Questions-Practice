86. Partition List

Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

 

Example 1:


Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:

Input: head = [2,1], x = 2
Output: [1,2]
 

Constraints:

The number of nodes in the list is in the range [0, 200].
-100 <= Node.val <= 100
-200 <= x <= 200

------------------------------------------
Sol 1 - 
TC - O(n)
SC - O(n)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode first = new ListNode(-1);
        ListNode firstHead = first;

        ListNode second = new ListNode(-1);
        ListNode secondHead = second;

        ListNode current = head;

        while(current != null)
        {
            if(current.val < x)
            {
                first.next = new ListNode(current.val);
                first = first.next;
            }
            else
            {
                second.next = new ListNode(current.val);
                second = second.next;
            }
            current = current.next;
        }
        
        first.next = secondHead.next;
        return firstHead.next;
    }
}
