61. Rotate List

Given the head of a linked list, rotate the list to the right by k places.

 Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

-------------------------------------------------

Sol 1- TC - O(n)
SC  -O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || head.next == null || k == 0)
        {
            return head;
        }
        int size = 1;
        ListNode current = head;

        while(current.next != null)
        {
            current = current.next;
            size++;
        }
        k = k % size;
        if(k == 0 || k == size)
        {
            return head;
        }
        int index = size - k;
        current.next = head;

        for(int i = 0; i < index; i++)
        {
            current = current.next;
        }
       
        head = current.next;
        current.next = null;
        return head;
    }
}
