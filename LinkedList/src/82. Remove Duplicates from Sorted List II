Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]
Example 2:


Input: head = [1,1,1,2,3]
Output: [2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.

---------------------------------------

Sol 1 - TC - O(n)
Sc - O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null || head.next == null)
        {
            return head;
        }

        ListNode dummy = new ListNode(-200);
        dummy.next = head;
        ListNode current = head;
        ListNode prev = dummy;
        ListNode next = current.next;
        int val = -200;

        while(current != null)
        {
            if((next == null || current.val != next.val) && current.val != val)
            {
                prev.next = current;
                val = prev.val;
                prev = prev.next;
            }
            else
            {
                val = current.val;
            }
            current = current.next;
            if(next != null)
            {
                next = next.next;
            }
        }
        prev.next = current;
        return dummy.next;

    }
}
