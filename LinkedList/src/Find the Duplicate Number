Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
 

Follow up:

How can we prove that at least one duplicate number must exist in nums?
Can you solve the problem in linear runtime complexity?

------------------------------------------

Solution 1 - Sorting
TC - O(n log n)
SC - O(n)

class Solution {
    public int findDuplicate(int[] nums) {
        if(nums == null || nums.length <= 1)
            return -1;
        
        Arrays.sort(nums);
        
        int i = 1;
        while(i < nums.length)
        {
            if(nums[i] == nums[i - 1])
                return nums[i];
            i++;
        }
        return -1;
    }
}

---------------------------------------

Solution 2 - Hashing
TC - O(n)
SC - O(n)

class Solution {
    public int findDuplicate(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i : nums)
        {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        
        for(int key: map.keySet())
        {
            if(map.get(key) > 1)
                return key;
        }
        return -1;
    }
}

-------------------------------------------

Solution 2 - Negative Marking
TC - O(n) SC - O(1)

class Solution {
    public int findDuplicate(int[] nums) {
        if(nums == null || nums.length == 0)
            return -1;
        
        for(int i = 0; i < nums.length; i++)
        {
            if(nums[Math.abs(nums[i])]  < 0)
                return Math.abs(nums[i]);
            nums[Math.abs(nums[i])] *= -1;
        }
        return -1;
    }
}
