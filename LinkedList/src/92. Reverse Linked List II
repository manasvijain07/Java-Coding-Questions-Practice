Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
 

Follow up: Could you do it in one pass?

-------------------------------------

Sol 1 - 
TC - O(n)
SC - O(1)


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode current = dummy;

        for(int i = 0; i < left - 1; i++)
        {
            current = current.next;
        }

        ListNode prev = current;
        int index = right - left;
        if(prev.next != null)
        {
            System.out.println("curr/ent - " + prev.next.val);
            ListNode node = reverse(prev.next, index);
            prev.next = node;
        }
        return dummy.next;
    }

    public ListNode reverse(ListNode head, int index)
    {
        ListNode current = head;
        ListNode prev = null;
        ListNode next = head;

        while(index >= 0 && next != null)
        {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
            index--;
        }
        // System.out.println("head - " + head.val);
        head.next = current;
        return prev;
    }
}
