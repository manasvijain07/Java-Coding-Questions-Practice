Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

A leaf is a node with no children.

 

Example 1:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.
Example 2:


Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.
Example 3:

Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.

--------------------------------------

Solution 1 - Recursive 
TC - O(n)
SC - O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null)
            return false;
        
        if(root.left == null && root.right == null && root.val == targetSum)
            return true;
        
        return hasPathSum(root.left, targetSum - root.val) || hasPathSum(root.right, targetSum - root.val);
    }
}

------------------------------------------

Solution 2 - Iterative - 
TC - O(n)
SC - O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    class Node
    {
        TreeNode node;
        int sum;
        
        Node(TreeNode node, int sum)
        {
            this.node = node;
            this.sum = sum;
        }
    }
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null)
            return false;
        
        Stack<Node> stack = new Stack<>();
        Node newNode = new Node(root, root.val);
        stack.push(newNode);
        
        while(!stack.isEmpty())
        {
            Node temp = stack.pop();
            TreeNode treeNode = temp.node;
            if(treeNode.left == null && treeNode.right == null && temp.sum == targetSum)
                return true;
            if(treeNode.left != null)
            {
                newNode = new Node(treeNode.left, temp.sum + treeNode.left.val);
                stack.push(newNode);
            }
            if(treeNode.right != null)
            {
                newNode = new Node(treeNode.right, temp.sum + treeNode.right.val);
                stack.push(newNode);
            }
            
        }
        return false;
    }
}
