Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

-------------------------------------------

Solution 1 - DFS 
TC - O(m * n)
SC - O(m * n)

class Solution {
    int[][] dirs = new int[][]{{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
    int m, n;
    public int numIslands(char[][] grid) {
        int result = 0;
        if(grid == null || grid.length == 0)
            return result;
        
        m = grid.length;
        n = grid[0].length;
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0 ; j < n; j++)
            {
                if(grid[i][j] == '1')
                {
                    dfs(grid, i, j);
                    result++;
                }
            }
        }
        return result;
    }
    
    public void dfs(char[][] grid, int i, int j)
    {
        if(i < 0 || j < 0 || i >= m || j >= n || grid[i][j] != '1')
            return;
        
        grid[i][j] *= -1 ;
        
        for(int[] dir: dirs)
        {
            int row = dir[0] + i;
            int col = dir[1] + j;
            
            dfs(grid, row, col);
        }
    }
}

---------------------------------------

Solution 2 - BFS
TC - O(m * n)
SC - O(m * n)

class Solution {
    
    int[][] dirs = new int[][]{{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
    int m, n;
     int result = 0;
        
    
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0)
            return result;
        
        m = grid.length;
        n = grid[0].length;
        
        for(int i = 0; i <  m; i++){

            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == '1')
                {
                    System.out.println("in here");
                    bfs(grid, i, j);
                }
                
            }
        }
        return result;
    }
    
    public void bfs(char[][] grid, int i, int j)
    {
                    
        Queue<Pair<Integer, Integer>> queue = new LinkedList<>();   
        queue.add(new Pair(i, j));
        grid[i][j] = '0';
        
        while(!queue.isEmpty())
        {
            Pair<Integer, Integer> p = queue.poll();
            int r = p.getKey();
            int c = p.getValue();
            
            System.out.println(r + " : " + c + " - " + grid[r][c]);

            for(int[] dir : dirs)
            {
                int row = dir[0] + r;
                int col = dir[1] + c;

                if(row >= 0 && col >= 0 && row < m && col < n && grid[row][col] == '1')
                {
                    grid[row][col] = '0';
                    queue.add(new Pair(row, col));
                }
            }
        }
        result++;
    }
}
    
    

