Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).

 

Example 1:


Input: root = [1,3,2,5,3,null,9]
Output: [1,3,9]
Example 2:

Input: root = [1,2,3]
Output: [1,3]
 

Constraints:

The number of nodes in the tree will be in the range [0, 104].
-231 <= Node.val <= 231 - 1

-------------------------------

Solution 1 - BFS
TC - O(n)
SC - O(leaf node)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
       Queue<TreeNode> q=new LinkedList<>();
        if(root!=null)
        q.add(root);
        List<Integer> ans=new ArrayList<>();
        while(!q.isEmpty())
        {
            int max=Integer.MIN_VALUE;
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                TreeNode node=q.poll();
                max=Math.max(node.val,max);
                if(node.left!=null)
                    q.add(node.left);
                if(node.right!=null)
                    q.add(node.right);
            }
            ans.add(max);
        }
        return ans;
    }
}

-------------------------------------

Solution 2 - DFS 
TC - O(n)
SC - O(h)

class Solution {
    List<Integer> result = new ArrayList<>();
    public List<Integer> largestValues(TreeNode root) {
        if(root == null)
            return result;
        
        dfs(root, 0);
        return result;
    }
    
    public void dfs(TreeNode root, int level)
    {
        if(root == null)
            return;
        
        if(result.size() == level)
        {
            result.add(Integer.MIN_VALUE);
        }
        result.set(level, Math.max(root.val, result.get(level)));
        
        dfs(root.left, level + 1);
        dfs(root.right, level + 1);
    }
}
