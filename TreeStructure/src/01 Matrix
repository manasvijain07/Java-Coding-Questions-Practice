Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.

 

Example 1:


Input: mat = [[0,0,0],[0,1,0],[0,0,0]]
Output: [[0,0,0],[0,1,0],[0,0,0]]
Example 2:


Input: mat = [[0,0,0],[0,1,0],[1,1,1]]
Output: [[0,0,0],[0,1,0],[1,2,1]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 104
1 <= m * n <= 104
mat[i][j] is either 0 or 1.
There is at least one 0 in mat.

------------------------------

Solution 1 - BFS 
TC - O(m * n)
SC - O(m * n)

class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int[][] dirs = new int[][]{{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        Queue<Pair<Integer, Integer>> queue = new LinkedList<>();
        int m = mat.length, n = mat[0].length;
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(mat[i][j] == 0)
                {
                    queue.add(new Pair(i, j));
                }
                else 
                    mat[i][j] = -1;
            }
        }
        
        int level = 0;
        while(!queue.isEmpty())
        {
            int size = queue.size();
            level++;
            for(int i = 0; i < size; i++)
            {
                Pair<Integer, Integer> p = queue.poll();
                
                for(int[] dir : dirs)
                {
                    int row = p.getKey() + dir[0];
                    int col = p.getValue() + dir[1];

                    if(row >= 0 && col >= 0 && row < m && col < n && mat[row][col] == -1)
                    {
                        queue.add(new Pair(row, col));
                        mat[row][col] = level;
                    }
                }
            }
            
        }
        return mat;
    }
}

-------------------------------------

Solution 2 - DFS


