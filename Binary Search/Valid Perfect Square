Given a positive integer num, write a function which returns True if num is a perfect square else False.

Follow up: Do not use any built-in library function such as sqrt.

 

Example 1:

Input: num = 16
Output: true
Example 2:

Input: num = 14
Output: false
 

Constraints:

1 <= num <= 2^31 - 1

-------------------------------------------------

Solution 1 - TC - O(n/2) SC - O(1)

class Solution {
    public boolean isPerfectSquare(int num) {
        if(num == 1)
            return true;
        for(int i = num/2; i > 0; i--)
        {
            if(i * i == num)
                return true;
        }
        return false;
    }
}

---------------------------------------------------

Solution 2 - TC - O(log n) SC - O(1)

class Solution {
    public boolean isPerfectSquare(int num) {
        int start = 1, end = num/ 2 + 1;
        
        while(start <= end)
        {
            int mid = start + (end - start)/2;
            
            if(mid == (double)num/ mid)
                return true;
            else if(mid > (double)num/ mid)
                end = mid - 1;
            else
                start = mid + 1;
        }
        return false;
    }
}
