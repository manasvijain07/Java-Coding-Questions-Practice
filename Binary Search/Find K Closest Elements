Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.

An integer a is closer to x than an integer b if:

|a - x| < |b - x|, or
|a - x| == |b - x| and a < b
 

Example 1:

Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]
Example 2:

Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]
 

Constraints:

1 <= k <= arr.length
1 <= arr.length <= 104
arr is sorted in ascending order.
-104 <= arr[i], x <= 104

----------------------------------------------

Solution 1 - Brute Force: Just sort the array first by distance to target, if two number have same distance to target, then sort by natural order of two number.

Time Complexity: O(NlogN)

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> result = new LinkedList<>();
        
        int len = arr.length;
        // Space: O(N)
        Integer[] nums = new Integer[len];
        int i;
        for (i = 0; i < len; i++) {
            nums[i] = arr[i];
        }
        
        Arrays.sort(nums, new Comparator<Integer>() {
           @Override 
            public int compare(Integer a, Integer b) {
                int distA = Math.abs(a - x);
                int distB = Math.abs(b - x);
                if (distA == distB) {
                    return a - b;
                }
                return distA - distB;
            }
        });

        for (i = 0; i < k; i++) {
            result.add(nums[i]);
        }
        
        Collections.sort(result);
        return result;
    }
}

--------------------------------------------

Solution 2 - Min-Heap:

Time Complexity: O(NlogN) SC - O(n)

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> result = new ArrayList<>();
        
        PriorityQueue<Integer> pq = new PriorityQueue<Integer> (new Comparator<Integer>()
        {
            @Override
            public int compare(Integer a, Integer b)
            {
                int distA = Math.abs(a - x);
                int distB = Math.abs(b - x);
                
                if(distA == distB)
                    return a - b;
                return distA - distB;
            }
        });
        
        for(int a: arr)
        {
            pq.offer(a);
        }
        
        while(result.size() < k)
        {
            result.add(pq.poll());
        }
        
        Collections.sort(result);
        return result;
    }
}

---------------------------------------------

Solution 3 - Binary Search + Two Pointer: After find the closest element, we can use two pointers to check elements on left and elements on right.

Time Complexity: O(log(n) + k)
Sc - O(1)

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int i = 0, j = arr.length - 1;
        List<Integer> result = new ArrayList<>(); 
        
        while(j - i + 1 > k)
        {
            int distA = Math.abs(x - arr[i]);
            int distB = Math.abs(x - arr[j]);
            
            if(distA > distB)
            {
                i++;
            }
            else
            {
                j--;
            }
        }
        
        while(i <= j)
        {
            result.add(arr[i]);
            i++;
        }
        return result;
        
    }
}
