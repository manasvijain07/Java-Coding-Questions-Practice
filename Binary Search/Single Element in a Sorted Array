You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105

----------------------------

Solution 1 - 
TC - O(log n)
SC - O(1)

class Solution {
    public int singleNonDuplicate(int[] nums) {
        if(nums == null || nums.length <= 1)
            return nums[0];
        
        int start = 0, end = nums.length - 1;
        
        while(start <= end)
        {
            int mid = start + (end - start)/ 2;
            
            if(mid % 2 == 0)
            {
                // even
                if(mid < nums.length - 1 && nums[mid] == nums[mid + 1])
                {
                    start = mid + 1;
                }
                else
                {
                    if(mid != 0 && nums[mid] != nums[mid - 1])
                        return nums[mid];
                    end = mid - 1;
                }
            }
            else
            {
                // odd
                if(mid != 0 && nums[mid - 1] == nums[mid])
                {
                    start = mid + 1;
                }
                else
                {
                    if(mid < nums.length - 1 && nums[mid] != nums[mid + 1])
                        return nums[mid];
                    end = mid - 1;
                }
            }
        }
        return nums[start];
    }
}

-----------------------------------

Solution 2 - XOR 
TC - O(n)
SC - O(1)

class Solution {
    public int singleNonDuplicate(int[] nums) {
        if(nums == null || nums.length <= 1)
            return nums[0];
        
        int res = 0;
        for(int i = 0; i < nums.length; i++)
        {
            res ^= nums[i];
        }
        return res;
    }
}
