Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

--------------------------------------

Solution 1 -  Brute force
TC - O(m * n)
SC - O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length, n = matrix[0].length;
        
        if(matrix == null || m == 0)
            return false;
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(matrix[i][j] == target)
                    return true;
            }
        }
        return false;
    }
}

---------------------------------------

Solution 2 - Binary Search in a row
TC - O(n + log m)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length, n = matrix[0].length;
        
        if(matrix == null || m == 0)
            return false;
        
        for(int i = 0; i < m; i++)
        {
            if(matrix[i][0] <= target && target <= matrix[i][n - 1])
            {
                return binarySearch(matrix[i], target, 0, n - 1);
            }
        }
        return false;
    }
    
    public boolean binarySearch(int[] nums, int target, int start, int end)
    {
        if(start <= end)
        {
            int mid = start + (end - start)/2;
            
            if(nums[mid] == target)
                return true;
            else if(target < nums[mid])
                return binarySearch(nums, target, start, mid - 1);
            else
                return binarySearch(nums, target, mid + 1, end);
        }
        return false;
    }
}

------------------------------------

Solution 3 - Binary search on both rows and cols
TC - O(log m + log n)
SC - O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length, n = matrix[0].length;
        
        if(matrix == null || m == 0)
            return false;
        
        int i = 0, j = m - 1;
        while(i <= j)
        {
            int midPoint = i + (j - i)/2;
            if(matrix[midPoint][0] <= target && target <= matrix[midPoint][n - 1])
            {
                return binarySearch(matrix[midPoint], target, 0, n - 1);
            }
            
            else if(target < matrix[midPoint][0])
            {
                j = midPoint - 1;
            }
            else
            {
                i = midPoint + 1;
            }
            
        }
        return false;
    }
    
    public boolean binarySearch(int[] nums, int target, int start, int end)
    {
        if(start <= end)
        {
            int mid = start + (end - start)/2;
            
            if(nums[mid] == target)
                return true;
            else if(target < nums[mid])
                return binarySearch(nums, target, start, mid - 1);
            else
                return binarySearch(nums, target, mid + 1, end);
        }
        return false;
    }
}

--------------------------------------

Solution 4 - Starting top right and moving either left or right to find a value
TC - O(m + n)
SC - O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length, n = matrix[0].length;
        
        if(matrix == null || m == 0)
            return false;
        
        int i = 0, j = n - 1;
        
        while(i >= 0 && j >= 0 && i < m && j < n)
        {
            if(matrix[i][j] == target)
                return true;
            
            if(target < matrix[i][j])
            {
                j--;
            }
            
            else
            {
                i++;
            }
        }
        return false;
    }
}

------------------------------------------

Solution 5 - Considering the 2d matrix to single matrix and performing binary search
TC - O(log(m * n))
SC - O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length, n = matrix[0].length;
        
        if(matrix == null || m == 0)
            return false;
        
        int i = 0, j = m * n - 1;
        
        while(i <= j)
        {
            int mid = i + (j - i)/2;
            
            int row = mid / n;
            int col = mid % n;
                
            if(matrix[row][col] == target)
                return true;
            else if(target < matrix[row][col])
                j = mid - 1;
            else
                i = mid + 1;
        }
        return false;
    }
}
