Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

 

Example 1:

Input: piles = [3,6,7,11], h = 8
Output: 4
Example 2:

Input: piles = [30,11,23,4,20], h = 5
Output: 30
Example 3:

Input: piles = [30,11,23,4,20], h = 6
Output: 23
 

Constraints:

1 <= piles.length <= 104
piles.length <= h <= 109
1 <= piles[i] <= 109

--------------------------------

Solution 1 - Binary Search - 
Time complexity: O(n⋅logm)

The initial search space is from 11 to mm, it takes \log mlogm comparisons to reduce the search space to 1.
For each eating speed middlemiddle, we traverse the array and calculate the overall time Koko spends, which takes O(n)O(n) for each traversal.
To sum up, the time complexity is O(n⋅logm).
Space complexity: O(1)O(1)

For each eating speed middlemiddle, we iterate over the array and calculate the total hours Koko spends, which costs constant space.
Therefore, the overall space complexity is O(1)O(1).

class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        if(piles == null || piles.length == 0)
            return -1;
        
        // step 1 - find the max value
        int max = 0;
        for(int i = 0; i < piles.length; i++)
        {
            max = Math.max(piles[i], max);
        }
        
        // perform binary search between 1 to max value to see which is the output
        int i = 1, j = max;
        
        while(i < j)
        {
            int mid = i + (j - i)/2;
            
            int count = 0;
            
            for(int k = 0; k < piles.length; k++)
            {
                count += Math.ceil((double)piles[k]/ mid);
            }
            
            if(count <= h)
            {
                j = mid;
            }
            else
            {
                i = mid + 1;
            }
            
        }
        return j;
    }
}
