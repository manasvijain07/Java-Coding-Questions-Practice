Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4
Example 2:

Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1
 

Constraints:

1 <= nums.length <= 104
-104 < nums[i], target < 104
All the integers in nums are unique.
nums is sorted in ascending order.

----------------------------------

Solution 1 - Iterative
Tc - O(log n)
SC - O(1)

public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0)
            return -1;
        
        int low = 0, high = nums.length - 1;
        
        while(low <= high)
        {
            int mid = low + (high - low)/2;
            
            if(nums[mid] == target)
                return mid;
            
            else if(target < nums[mid])
            {
                high = mid - 1;
            }
            
            else
            {
                low = mid + 1;
            }
        }
        return -1;
    }
    
 --------------------------------------
 
 Solution 2 - Recursive
 TC - O(log n)
 SC - O(log n)
 
 public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0)
            return -1;
        
        return binarySearch(nums, target, 0, nums.length - 1);
    }
    
    public int binarySearch(int[] nums, int target, int start, int end)
    {
        if(start <= end)
        {
            int mid = start + (end - start)/2;
            
            if(nums[mid] == target)
                return mid;
            
            if(target < nums[mid])
            {
                return binarySearch(nums, target, start, mid - 1);
            }
            else
            {
                return binarySearch(nums, target, mid + 1, end);
            }
        }
        return -1;
    }
 
