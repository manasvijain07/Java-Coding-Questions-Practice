Implement Min Stack

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Constraints:

-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.

----------------------------------***---------------------------------

Solution 1- Using 2 stacks 

class MinStack {
    private Stack<Integer> stack;
    private Stack<Integer> minstack;

    public MinStack() {
        stack = new Stack<Integer>();
        minstack = new Stack<Integer>();
        minstack.push(Integer.MAX_VALUE);
    }
    
    public void push(int val) {
        if(minstack.peek() >= val)
        {
            minstack.push(val);
        }
        stack.push(val);
    }
    
    public void pop() {
        if(!stack.isEmpty() && minstack.peek().equals(stack.peek()))
        {
            minstack.pop();
        }
        stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return minstack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 
 Time Complexity - 
 - push() - O(1)
 - pop() - O(1)
 - top - O(1)
 - min - O(1)
 
Space complexity - O(n)

----------------------------------***------------------------------

Solution 2 - Using single stack and adding min only when it is changed -

class MinStack {
    private Stack<Integer> stack;
    private int min;

    public MinStack() {
        stack = new Stack<Integer>();
        min = Integer.MAX_VALUE;
    }
    
    public void push(int val) {
        if(val <= min)
        {
            stack.push(min);
            min = val;
        }
        stack.push(val);
    }
    
    public void pop() {
        if(min == stack.pop())
        {
            min = stack.pop();
        }
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

Time Complexity - 
 - push() - O(1)
 - pop() - O(1)
 - top - O(1)
 - min - O(1)
 
Space complexity - O(n)
