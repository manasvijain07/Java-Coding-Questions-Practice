There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.

-----------------------------

Solution 1 - BFS 
TC - O(V + E) where V - vertices, E - edges
SC - O(V + E)

class Solution {
    int[] indegree;
    
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if(prerequisites == null || prerequisites.length == 0)
            return true;
        
        indegree = new int[numCourses];
        HashMap<Integer, List<Integer>> adjacencyList = new HashMap<>();
        
        Queue<Integer> queue = new LinkedList<>();
        
        for(int[] prereq: prerequisites)
        {
            indegree[prereq[0]] += 1;
            
            if(!adjacencyList.containsKey(prereq[1]))
            {
                adjacencyList.put(prereq[1], new ArrayList<>());
            }
            adjacencyList.get(prereq[1]).add(prereq[0]);
        }
        
        //perform bfs
        int count = 0;
        for(int i = 0; i < indegree.length; i++)
        {
            if(indegree[i] == 0)
            {
                count++;
                queue.add(i);
            }
        }
        if(queue.isEmpty())
            return false;
        
        while(!queue.isEmpty())
        {
            int node = queue.poll();
            List<Integer> neighbours = adjacencyList.get(node);
            if(neighbours != null)
            {
                for(int neighbour: neighbours)
                {
                    indegree[neighbour] -= 1;
                    if(indegree[neighbour] == 0)
                    {
                        count++;
                        queue.add(neighbour);
                    }

                }
            }
        }
        
        return count == indegree.length;
    }
}
