Design a HashSet without using any built-in hash table libraries.

Implement MyHashSet class:

 - void add(key) Inserts the value key into the HashSet.
 - bool contains(key) Returns whether the value key exists in the HashSet or not.
 - void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.
 
Example - 

Input
["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
Output
[null, null, null, true, false, null, true, null, false]

Constraints-

0 <= key <= 106
At most 104 calls will be made to add, remove, and contains.

---------------------------***-----------------------------

Solution - 

class MyHashSet {
    
    private boolean [][] storage;
    private int bucket1_size;
    private int bucket2_size;

    public MyHashSet() {
        bucket1_size = 1000;
        bucket2_size = 1000;
        storage = new boolean[bucket1_size][];
    }
    
    public int hashFunction1(int key)
    {
        return key % bucket1_size;
    }
    
    public int hashFunction2(int key)
    {
        return key / bucket2_size;
    }
    
    // TC - O(1)
    public void add(int key) {
        int index1 = hashFunction1(key);
        int index2 = hashFunction2(key);
        
        if(storage[index1] == null)
        {
            if(index1 == 0)
            {
                storage[index1] = new boolean[bucket2_size + 1];
            }
            else
            {
                storage[index1] = new boolean[bucket2_size];
            }
        }
        storage[index1][index2] = true;
        
    }
    
    // TC - O(1)
    public void remove(int key) {
        int index1 = hashFunction1(key);
        int index2 = hashFunction2(key);
        
        if(storage[index1] == null)
        {
            return;
        }

        storage[index1][index2] = false;
        
    }
    
    // TC - O(1)
    public boolean contains(int key) {
        int index1 = hashFunction1(key);
        int index2 = hashFunction2(key);
        
        if(storage[index1] == null) return false;
        if(storage[index1][index2]) 
            return true;
        else
            return false;
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */
 
 -------------------------------***------------------------
 
 Time Complexity - 
  - add() - O(1)
  - remove() - O(1)
  - contains() - O(1)
 

