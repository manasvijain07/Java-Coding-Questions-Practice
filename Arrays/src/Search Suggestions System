You are given an array of strings products and a string searchWord.

Design a system that suggests at most three product names from products after each character of searchWord is typed. Suggested products should have common prefix with searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.

Return a list of lists of the suggested products after each character of searchWord is typed.

 

Example 1:

Input: products = ["mobile","mouse","moneypot","monitor","mousepad"], searchWord = "mouse"
Output: [
["mobile","moneypot","monitor"],
["mobile","moneypot","monitor"],
["mouse","mousepad"],
["mouse","mousepad"],
["mouse","mousepad"]
]
Explanation: products sorted lexicographically = ["mobile","moneypot","monitor","mouse","mousepad"]
After typing m and mo all products match and we show user ["mobile","moneypot","monitor"]
After typing mou, mous and mouse the system suggests ["mouse","mousepad"]
Example 2:

Input: products = ["havana"], searchWord = "havana"
Output: [["havana"],["havana"],["havana"],["havana"],["havana"],["havana"]]
Example 3:

Input: products = ["bags","baggage","banner","box","cloths"], searchWord = "bags"
Output: [["baggage","bags","banner"],["baggage","bags","banner"],["baggage","bags"],["bags"]]
 

Constraints:

1 <= products.length <= 1000
1 <= products[i].length <= 3000
1 <= sum(products[i].length) <= 2 * 104
All the strings of products are unique.
products[i] consists of lowercase English letters.
1 <= searchWord.length <= 1000
searchWord consists of lowercase English letters.

----------------------------------

Solution 1 - 
TC - O(m * n) where m - length of products, n - avg size of each product
SC - O(no of nodes in trie)


class Solution {
    
    class Node
    {
        Node [] node;
        boolean isEnd;
        List<String> suggested;
        
        public Node()
        {
            node = new Node[26];
            isEnd = false;
            suggested = new ArrayList<>();
        }
    }
    
    Node root;
    
    public Solution()
    {
        root = new Node();
    }
    
    List<List<String>> res; 
    public List<List<String>> suggestedProducts(String[] products, String searchWord) {
        res = new ArrayList<>();
        
        for(String product: products)
        {
            createTrie(product);
        }
        
        StringBuilder sb = new StringBuilder();
        
        for(int i = 0; i < searchWord.length(); i++)
        {
            sb.append(searchWord.charAt(i));
            getList(sb.toString());
        }
        return res;
    }
    
    public void getList(String searchWord)
    {
        Node current = root;
        
        for(int i = 0; i < searchWord.length(); i++)
        {
            char c = searchWord.charAt(i);
            int index = c - 'a';
            if(current.node[index] == null)
            {
                res.add(new ArrayList());
                return;
            }
            current = current.node[index];
        }

        List<String> resultSet = current.suggested;
        res.add(resultSet);
    }
    
    public void createTrie(String product)
    {
        Node current = root;
        
        for(int i = 0; i < product.length(); i++)
        {
            char c = product.charAt(i);
            int index = c - 'a';
            if(current.node[index] == null)
            {
                current.node[index] = new Node();
            }
            current = current.node[index];
            
            current.suggested.add(product);
            
            Collections.sort(current.suggested);
            
            if(current.suggested.size() == 4)
            {
                current.suggested.remove(current.suggested.size() - 1);
            }
        }
        current.isEnd = true;
    }
}
