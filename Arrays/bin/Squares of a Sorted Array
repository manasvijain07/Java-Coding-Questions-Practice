Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
 

Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?

----------------------------------------

Solution 1 - 
TC - O(n log n)
SC - O(n) or O(log n)

class Solution {
    public int[] sortedSquares(int[] nums) {
        int n = nums.length;
        int[] res = new int[n];
        
        if(nums == null || n == 0)
            return res;
        
        for(int i = 0; i < n; i++)
        {
            res[i] = nums[i] * nums[i];
        }
        Arrays.sort(res);
        return res;
    }
}

------------------------------------

Solution 2 - 

TC - O(n)
SC - O(1)

class Solution {
    public int[] sortedSquares(int[] nums) {
        int n = nums.length;
        int[] res = new int[n];
        
        if(nums == null || n == 0)
            return res;
        
        int i = 0, j = n - 1, k = n - 1;
        
        while(i <= j)
        {
            int val1 = nums[i] * nums[i];
            int val2 = nums[j] * nums[j];
            
            if(val1 > val2)
            {
                res[k--] = val1;
                i++;
            }
            else
            {
                res[k--] = val2;
                j--;
            }
            
        }
        return res;
    }
}
