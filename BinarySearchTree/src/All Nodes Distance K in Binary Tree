Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.

You can return the answer in any order.

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.
Example 2:

Input: root = [1], target = 1, k = 3
Output: []
 

Constraints:

The number of nodes in the tree is in the range [1, 500].
0 <= Node.val <= 500
All the values Node.val are unique.
target is the value of one of the nodes in the tree.
0 <= k <= 1000

---------------------------------------------

Solution 1 - 
TC - O(n)
SC - O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<Integer> res;
    HashMap<Integer, List<Integer>> map;
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        res = new ArrayList<>();
        
        if(root == null)
            return res;
        
        map = new HashMap();
        
        createAdjacencyMap(root, null);
        getListOfKDistance(target, k);
        return res;
    }
    
    public void createAdjacencyMap(TreeNode root, TreeNode parent)
    {
        if(root == null)
        {
            return;
        }
        
        List<Integer> adjacentNodes = new ArrayList<>();
        if(parent != null)
            adjacentNodes.add(parent.val);
        
        if(root.left != null)
            adjacentNodes.add(root.left.val);
        
        if(root.right != null)
            adjacentNodes.add(root.right.val);
        
        map.put(root.val, adjacentNodes);
        createAdjacencyMap(root.left, root);
        createAdjacencyMap(root.right, root);
    }
    
    public void getListOfKDistance(TreeNode target, int k)
    {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(target.val);
        int count = 0;
        if(count == k)
        {
            res.add(target.val);
            return;
        }
        HashSet<Integer> visited = new HashSet<>();
        visited.add(target.val);
        
        while(!queue.isEmpty())
        {
            int size = queue.size();
            for(int i = 0; i < size; i++)
            {
                int node = queue.poll();
                List<Integer> adjacentNodes = map.get(node);
            
                for(int adjacentNode : adjacentNodes)
                {
                    if(!visited.contains(adjacentNode))
                    {
                        queue.add(adjacentNode);
                        visited.add(adjacentNode);
                    }
                    
                }
            }
            count++;
            if(count == k)
            {
                while(!queue.isEmpty())
                {
                    res.add(queue.poll());
                }
                return;
            }
        }
    }
}
