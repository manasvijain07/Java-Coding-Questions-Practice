Given the root of a binary tree, return the maximum average value of a subtree of that tree. Answers within 10-5 of the actual answer will be accepted.

A subtree of a tree is any node of that tree plus all its descendants.

The average value of a tree is the sum of its values, divided by the number of nodes.

 

Example 1:


Input: root = [5,6,1]
Output: 6.00000
Explanation: 
For the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.
For the node with value = 6 we have an average of 6 / 1 = 6.
For the node with value = 1 we have an average of 1 / 1 = 1.
So the answer is 6 which is the maximum.
Example 2:

Input: root = [0,null,1]
Output: 1.00000
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
0 <= Node.val <= 105

------------------------------------

Solution 1 - 
TC - O(n)
SC - O(h) or O(n) in worst case

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    double maxAvg;
      
    public double maximumAverageSubtree(TreeNode root) {
        if(root == null)
            return 0;
            
        helper(root);
        return maxAvg;
    }
    
    public Pair<Integer, Integer> helper(TreeNode root)
    {
        
        if(root == null)
        {
            return new Pair<>(0, 0);
        }
            
        Pair<Integer, Integer> left = helper(root.left);
        Pair<Integer, Integer> right = helper(root.right);
            
        int sum = left.getKey() + right.getKey() + root.val;
        int count = left.getValue() + right.getValue() + 1;
            
        double avg = (double)sum/ (double)count;    
        maxAvg = Math.max(avg, maxAvg);    
        return new Pair<>(sum, count);    
    }
}
