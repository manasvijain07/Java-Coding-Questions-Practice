Implement Queues Using Stack -

Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).

Implement the MyQueue class:

void push(int x) Pushes element x to the back of the queue.
int pop() Removes the element from the front of the queue and returns it.
int peek() Returns the element at the front of the queue.
boolean empty() Returns true if the queue is empty, false otherwise.

Example :

Input
["MyQueue", "push", "push", "peek", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 1, 1, false]

Constraints:

1 <= x <= 9
At most 100 calls will be made to push, pop, peek, and empty.
All the calls to pop and peek are valid.

--------------------------***------------------------------

Solution 1 - Using 2 stacks to implement queues - instack and outstack
Push - push every item that's coming - TC - O(1)
Pop - if outstack is empty then push all items from instack to outstack till instack is empty. Then pop top of outstack
      else pop top of outstack
      TC - if outstack is empty - O(n)
           else O(1)
           avg TC - O(1)
Peek - if outstack is empty then push all items from instack to outstack till instack is empty. Then get top of outstack
      else get top of outstack
      TC - if outstack is empty - O(n)
           else O(1)
           avg TC - O(1)

class MyQueue {
    Stack<Integer> instack;
    Stack<Integer> outstack;

    public MyQueue() {
        instack = new Stack<Integer>();
        outstack = new Stack<Integer>();
    }
    
    // TC - O(1)
    public void push(int x) {
        instack.push(x);
    }
    
    // TC - O(n) if outstack is empty else O(1) 
    // avg time complexity - O(1)
    public int pop() {
        peek();
        return outstack.pop();
    }
    
    // TC - O(n) if outstack is empty else O(1) 
    // avg time complexity - O(1)
    public int peek() {
        if(outstack.isEmpty())
        {
            while(!instack.isEmpty())
            {
                outstack.push(instack.pop());
            }
        }
        return outstack.peek();
    }
    
    // TC - O(1)
    public boolean empty() {
        return instack.isEmpty() && outstack.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
